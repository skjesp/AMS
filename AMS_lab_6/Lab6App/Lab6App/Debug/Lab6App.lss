
Lab6App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  000004fa  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f3  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000105e  00000000  00000000  00001fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000916  00000000  00000000  0000304d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000025c  00000000  00000000  00003964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000776  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000921  00000000  00000000  00004336  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	ea d0       	rcall	.+468    	; 0x2e4 <main>
 110:	f2 c1       	rjmp	.+996    	; 0x4f6 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <pulse_E>:
}

// Display "ch" at "current display position"
void LCDDispChar(char ch)
{	
	sendData(ch);
 114:	e2 e0       	ldi	r30, 0x02	; 2
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	...
 126:	00 00       	nop
 128:	80 81       	ld	r24, Z
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	80 83       	st	Z, r24
 12e:	00 00       	nop
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <set4DataPins>:
 134:	e2 e0       	ldi	r30, 0x02	; 2
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	20 81       	ld	r18, Z
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac 01       	movw	r20, r24
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	48 71       	andi	r20, 0x18	; 24
 144:	27 7e       	andi	r18, 0xE7	; 231
 146:	24 2b       	or	r18, r20
 148:	20 83       	st	Z, r18
 14a:	2e b1       	in	r18, 0x0e	; 14
 14c:	ac 01       	movw	r20, r24
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	48 70       	andi	r20, 0x08	; 8
 158:	27 7f       	andi	r18, 0xF7	; 247
 15a:	24 2b       	or	r18, r20
 15c:	2e b9       	out	0x0e, r18	; 14
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	82 95       	swap	r24
 166:	92 95       	swap	r25
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	98 27       	eor	r25, r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	98 27       	eor	r25, r24
 170:	80 72       	andi	r24, 0x20	; 32
 172:	92 2f       	mov	r25, r18
 174:	9f 7d       	andi	r25, 0xDF	; 223
 176:	89 2b       	or	r24, r25
 178:	84 bb       	out	0x14, r24	; 20
 17a:	08 95       	ret

0000017c <sendData>:
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
 180:	8f e1       	ldi	r24, 0x1F	; 31
 182:	9e e4       	ldi	r25, 0x4E	; 78
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <sendData+0x8>
 188:	00 c0       	rjmp	.+0      	; 0x18a <sendData+0xe>
 18a:	00 00       	nop
 18c:	e2 e0       	ldi	r30, 0x02	; 2
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	80 81       	ld	r24, Z
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 83       	st	Z, r24
 196:	80 81       	ld	r24, Z
 198:	8f 7b       	andi	r24, 0xBF	; 191
 19a:	80 83       	st	Z, r24
 19c:	00 00       	nop
 19e:	8c 2f       	mov	r24, r28
 1a0:	82 95       	swap	r24
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	c7 df       	rcall	.-114    	; 0x134 <set4DataPins>
 1a6:	b6 df       	rcall	.-148    	; 0x114 <pulse_E>
 1a8:	8c 2f       	mov	r24, r28
 1aa:	c4 df       	rcall	.-120    	; 0x134 <set4DataPins>
 1ac:	b3 df       	rcall	.-154    	; 0x114 <pulse_E>
 1ae:	87 ec       	ldi	r24, 0xC7	; 199
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <sendData+0x36>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <sendData+0x3c>
 1b8:	00 00       	nop
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <sendInstruction>:
 1be:	cf 93       	push	r28
 1c0:	c8 2f       	mov	r28, r24
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	9e e4       	ldi	r25, 0x4E	; 78
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <sendInstruction+0x8>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <sendInstruction+0xe>
 1cc:	00 00       	nop
 1ce:	e2 e0       	ldi	r30, 0x02	; 2
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	80 81       	ld	r24, Z
 1d4:	8f 79       	andi	r24, 0x9F	; 159
 1d6:	80 83       	st	Z, r24
 1d8:	00 00       	nop
 1da:	8c 2f       	mov	r24, r28
 1dc:	82 95       	swap	r24
 1de:	8f 70       	andi	r24, 0x0F	; 15
 1e0:	a9 df       	rcall	.-174    	; 0x134 <set4DataPins>
 1e2:	98 df       	rcall	.-208    	; 0x114 <pulse_E>
 1e4:	8c 2f       	mov	r24, r28
 1e6:	a6 df       	rcall	.-180    	; 0x134 <set4DataPins>
 1e8:	95 df       	rcall	.-214    	; 0x114 <pulse_E>
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <sendInstruction+0x30>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <sendInstruction+0x36>
 1f4:	00 00       	nop
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCDInit>:
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	80 81       	ld	r24, Z
 200:	88 67       	ori	r24, 0x78	; 120
 202:	80 83       	st	Z, r24
 204:	6b 9a       	sbi	0x0d, 3	; 13
 206:	9d 9a       	sbi	0x13, 5	; 19
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	80 e7       	ldi	r24, 0x70	; 112
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <LCDInit+0x14>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCDInit+0x1e>
 218:	00 00       	nop
 21a:	a5 9a       	sbi	0x14, 5	; 20
 21c:	73 9a       	sbi	0x0e, 3	; 14
 21e:	7a df       	rcall	.-268    	; 0x114 <pulse_E>
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDInit+0x2a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCDInit+0x30>
 22a:	00 00       	nop
 22c:	73 df       	rcall	.-282    	; 0x114 <pulse_E>
 22e:	8f e3       	ldi	r24, 0x3F	; 63
 230:	9c e9       	ldi	r25, 0x9C	; 156
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCDInit+0x38>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCDInit+0x3e>
 238:	00 00       	nop
 23a:	6c df       	rcall	.-296    	; 0x114 <pulse_E>
 23c:	8f e3       	ldi	r24, 0x3F	; 63
 23e:	9c e9       	ldi	r25, 0x9C	; 156
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCDInit+0x46>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCDInit+0x4c>
 246:	00 00       	nop
 248:	a5 98       	cbi	0x14, 5	; 20
 24a:	64 df       	rcall	.-312    	; 0x114 <pulse_E>
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	b7 df       	rcall	.-146    	; 0x1be <sendInstruction>
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	b5 df       	rcall	.-150    	; 0x1be <sendInstruction>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	b3 df       	rcall	.-154    	; 0x1be <sendInstruction>
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	b1 df       	rcall	.-158    	; 0x1be <sendInstruction>
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	af df       	rcall	.-162    	; 0x1be <sendInstruction>
 260:	83 e8       	ldi	r24, 0x83	; 131
 262:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
 266:	87 e0       	ldi	r24, 0x07	; 7
 268:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
 272:	24 9a       	sbi	0x04, 4	; 4
 274:	80 e4       	ldi	r24, 0x40	; 64
 276:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 27a:	87 ee       	ldi	r24, 0xE7	; 231
 27c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 280:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
 284:	08 95       	ret

00000286 <LCDClear>:
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	9a cf       	rjmp	.-204    	; 0x1be <sendInstruction>
 28a:	08 95       	ret

0000028c <LCDGotoXY>:
 28c:	98 2f       	mov	r25, r24
 28e:	61 30       	cpi	r22, 0x01	; 1
 290:	11 f4       	brne	.+4      	; 0x296 <LCDGotoXY+0xa>
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	01 c0       	rjmp	.+2      	; 0x298 <LCDGotoXY+0xc>
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	90 31       	cpi	r25, 0x10	; 16
 29a:	08 f4       	brcc	.+2      	; 0x29e <LCDGotoXY+0x12>
 29c:	89 2b       	or	r24, r25
 29e:	8f cf       	rjmp	.-226    	; 0x1be <sendInstruction>
 2a0:	08 95       	ret

000002a2 <LCDDispString>:
}

// Displays the string "str" starting at "current display position"
void LCDDispString(char* str)
{
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	8c 01       	movw	r16, r24
 2b0:	7c 01       	movw	r14, r24
	for(int i = 0; i< strlen(str); i++)
 2b2:	c0 e0       	ldi	r28, 0x00	; 0
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <LCDDispString+0x20>
	{	
		sendData(str[i]);
 2b8:	f7 01       	movw	r30, r14
 2ba:	81 91       	ld	r24, Z+
 2bc:	7f 01       	movw	r14, r30
 2be:	5e df       	rcall	.-324    	; 0x17c <sendData>
}

// Displays the string "str" starting at "current display position"
void LCDDispString(char* str)
{
	for(int i = 0; i< strlen(str); i++)
 2c0:	21 96       	adiw	r28, 0x01	; 1
 2c2:	f8 01       	movw	r30, r16
 2c4:	01 90       	ld	r0, Z+
 2c6:	00 20       	and	r0, r0
 2c8:	e9 f7       	brne	.-6      	; 0x2c4 <LCDDispString+0x22>
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	e0 1b       	sub	r30, r16
 2ce:	f1 0b       	sbc	r31, r17
 2d0:	ce 17       	cp	r28, r30
 2d2:	df 07       	cpc	r29, r31
 2d4:	88 f3       	brcs	.-30     	; 0x2b8 <LCDDispString+0x16>
	{	
		sendData(str[i]);
	}
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	08 95       	ret

000002e4 <main>:
#include "lcd162.h"

int main(void)
{
	
	LCDInit();
 2e4:	8a df       	rcall	.-236    	; 0x1fa <LCDInit>
	
	
	// Display clear
	LCDClear();
 2e6:	cf df       	rcall	.-98     	; 0x286 <LCDClear>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
	// Goto line 1, 3.character
	LCDGotoXY(2,0);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	cf df       	rcall	.-98     	; 0x28c <LCDGotoXY>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
	// Testing LCD_DispString()
	LCDDispString("It works?");
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	d7 df       	rcall	.-82     	; 0x2a2 <LCDDispString>
 2f4:	2e e4       	ldi	r18, 0x4E	; 78
 2f6:	48 e0       	ldi	r20, 0x08	; 8
	
	
	InitUART(9600,8,'N');
 2f8:	60 e8       	ldi	r22, 0x80	; 128
 2fa:	75 e2       	ldi	r23, 0x25	; 37
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0c d0       	rcall	.+24     	; 0x31a <InitUART>
 302:	c0 e0       	ldi	r28, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0; i<10 ; i++){
 304:	d0 e0       	ldi	r29, 0x00	; 0
			SendInteger(i);
 306:	ce 01       	movw	r24, r28
 308:	86 d0       	rcall	.+268    	; 0x416 <SendInteger>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
			SendString("\r\n");	
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	75 d0       	rcall	.+234    	; 0x3fa <SendString>
 310:	21 96       	adiw	r28, 0x01	; 1
 312:	ca 30       	cpi	r28, 0x0A	; 10
	
	InitUART(9600,8,'N');
    /* Replace with your application code */
    while (1) 
    {
		for(int i=0; i<10 ; i++){
 314:	d1 05       	cpc	r29, r1
 316:	b9 f7       	brne	.-18     	; 0x306 <main+0x22>
 318:	f4 cf       	rjmp	.-24     	; 0x302 <main+0x1e>

0000031a <InitUART>:
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	52 2f       	mov	r21, r18
 328:	8b 01       	movw	r16, r22
 32a:	9c 01       	movw	r18, r24
 32c:	0c 52       	subi	r16, 0x2C	; 44
 32e:	11 40       	sbci	r17, 0x01	; 1
 330:	21 09       	sbc	r18, r1
 332:	31 09       	sbc	r19, r1
 334:	05 3d       	cpi	r16, 0xD5	; 213
 336:	10 4c       	sbci	r17, 0xC0	; 192
 338:	21 40       	sbci	r18, 0x01	; 1
 33a:	31 05       	cpc	r19, r1
 33c:	08 f0       	brcs	.+2      	; 0x340 <InitUART+0x26>
 33e:	4e c0       	rjmp	.+156    	; 0x3dc <InitUART+0xc2>
 340:	45 50       	subi	r20, 0x05	; 5
 342:	44 30       	cpi	r20, 0x04	; 4
 344:	08 f0       	brcs	.+2      	; 0x348 <InitUART+0x2e>
 346:	4a c0       	rjmp	.+148    	; 0x3dc <InitUART+0xc2>
 348:	20 e2       	ldi	r18, 0x20	; 32
 34a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 34e:	28 e1       	ldi	r18, 0x18	; 24
 350:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 354:	44 0f       	add	r20, r20
 356:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 35a:	55 34       	cpi	r21, 0x45	; 69
 35c:	31 f4       	brne	.+12     	; 0x36a <InitUART+0x50>
 35e:	e2 ec       	ldi	r30, 0xC2	; 194
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 81       	ld	r18, Z
 364:	20 62       	ori	r18, 0x20	; 32
 366:	20 83       	st	Z, r18
 368:	07 c0       	rjmp	.+14     	; 0x378 <InitUART+0x5e>
 36a:	5f 34       	cpi	r21, 0x4F	; 79
 36c:	29 f4       	brne	.+10     	; 0x378 <InitUART+0x5e>
 36e:	e2 ec       	ldi	r30, 0xC2	; 194
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	20 81       	ld	r18, Z
 374:	20 63       	ori	r18, 0x30	; 48
 376:	20 83       	st	Z, r18
 378:	6b 01       	movw	r12, r22
 37a:	7c 01       	movw	r14, r24
 37c:	20 e8       	ldi	r18, 0x80	; 128
 37e:	c2 0e       	add	r12, r18
 380:	24 e8       	ldi	r18, 0x84	; 132
 382:	d2 1e       	adc	r13, r18
 384:	2e e1       	ldi	r18, 0x1E	; 30
 386:	e2 1e       	adc	r14, r18
 388:	f1 1c       	adc	r15, r1
 38a:	cc 0c       	add	r12, r12
 38c:	dd 1c       	adc	r13, r13
 38e:	ee 1c       	adc	r14, r14
 390:	ff 1c       	adc	r15, r15
 392:	cc 0c       	add	r12, r12
 394:	dd 1c       	adc	r13, r13
 396:	ee 1c       	adc	r14, r14
 398:	ff 1c       	adc	r15, r15
 39a:	cc 0c       	add	r12, r12
 39c:	dd 1c       	adc	r13, r13
 39e:	ee 1c       	adc	r14, r14
 3a0:	ff 1c       	adc	r15, r15
 3a2:	dc 01       	movw	r26, r24
 3a4:	cb 01       	movw	r24, r22
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	aa 1f       	adc	r26, r26
 3ac:	bb 1f       	adc	r27, r27
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	9c 01       	movw	r18, r24
 3b8:	ad 01       	movw	r20, r26
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	44 1f       	adc	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	44 1f       	adc	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	c7 01       	movw	r24, r14
 3cc:	b6 01       	movw	r22, r12
 3ce:	3e d0       	rcall	.+124    	; 0x44c <__udivmodsi4>
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	31 09       	sbc	r19, r1
 3d4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 3d8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	08 95       	ret

000003ea <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	95 ff       	sbrs	r25, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 3f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3f8:	08 95       	ret

000003fa <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 400:	88 81       	ld	r24, Y
 402:	88 23       	and	r24, r24
 404:	29 f0       	breq	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 408:	f0 df       	rcall	.-32     	; 0x3ea <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 40a:	89 91       	ld	r24, Y+
 40c:	81 11       	cpse	r24, r1
 40e:	fc cf       	rjmp	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <SendInteger>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	27 97       	sbiw	r28, 0x07	; 7
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 42a:	4a e0       	ldi	r20, 0x0A	; 10
 42c:	be 01       	movw	r22, r28
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	2e d0       	rcall	.+92     	; 0x490 <__itoa_ncheck>
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
  // - then send the string
  SendString(array);
 434:	ce 01       	movw	r24, r28
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	e0 df       	rcall	.-64     	; 0x3fa <SendString>
}
 43a:	27 96       	adiw	r28, 0x07	; 7
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <__udivmodsi4>:
 44c:	a1 e2       	ldi	r26, 0x21	; 33
 44e:	1a 2e       	mov	r1, r26
 450:	aa 1b       	sub	r26, r26
 452:	bb 1b       	sub	r27, r27
 454:	fd 01       	movw	r30, r26
 456:	0d c0       	rjmp	.+26     	; 0x472 <__udivmodsi4_ep>

00000458 <__udivmodsi4_loop>:
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	ee 1f       	adc	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	a2 17       	cp	r26, r18
 462:	b3 07       	cpc	r27, r19
 464:	e4 07       	cpc	r30, r20
 466:	f5 07       	cpc	r31, r21
 468:	20 f0       	brcs	.+8      	; 0x472 <__udivmodsi4_ep>
 46a:	a2 1b       	sub	r26, r18
 46c:	b3 0b       	sbc	r27, r19
 46e:	e4 0b       	sbc	r30, r20
 470:	f5 0b       	sbc	r31, r21

00000472 <__udivmodsi4_ep>:
 472:	66 1f       	adc	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	1a 94       	dec	r1
 47c:	69 f7       	brne	.-38     	; 0x458 <__udivmodsi4_loop>
 47e:	60 95       	com	r22
 480:	70 95       	com	r23
 482:	80 95       	com	r24
 484:	90 95       	com	r25
 486:	9b 01       	movw	r18, r22
 488:	ac 01       	movw	r20, r24
 48a:	bd 01       	movw	r22, r26
 48c:	cf 01       	movw	r24, r30
 48e:	08 95       	ret

00000490 <__itoa_ncheck>:
 490:	bb 27       	eor	r27, r27
 492:	4a 30       	cpi	r20, 0x0A	; 10
 494:	31 f4       	brne	.+12     	; 0x4a2 <__itoa_ncheck+0x12>
 496:	99 23       	and	r25, r25
 498:	22 f4       	brpl	.+8      	; 0x4a2 <__itoa_ncheck+0x12>
 49a:	bd e2       	ldi	r27, 0x2D	; 45
 49c:	90 95       	com	r25
 49e:	81 95       	neg	r24
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__utoa_common>

000004a4 <__utoa_ncheck>:
 4a4:	bb 27       	eor	r27, r27

000004a6 <__utoa_common>:
 4a6:	fb 01       	movw	r30, r22
 4a8:	55 27       	eor	r21, r21
 4aa:	aa 27       	eor	r26, r26
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	aa 1f       	adc	r26, r26
 4b2:	a4 17       	cp	r26, r20
 4b4:	10 f0       	brcs	.+4      	; 0x4ba <__utoa_common+0x14>
 4b6:	a4 1b       	sub	r26, r20
 4b8:	83 95       	inc	r24
 4ba:	50 51       	subi	r21, 0x10	; 16
 4bc:	b9 f7       	brne	.-18     	; 0x4ac <__utoa_common+0x6>
 4be:	a0 5d       	subi	r26, 0xD0	; 208
 4c0:	aa 33       	cpi	r26, 0x3A	; 58
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__utoa_common+0x20>
 4c4:	a9 5d       	subi	r26, 0xD9	; 217
 4c6:	a1 93       	st	Z+, r26
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	79 f7       	brne	.-34     	; 0x4aa <__utoa_common+0x4>
 4cc:	b1 11       	cpse	r27, r1
 4ce:	b1 93       	st	Z+, r27
 4d0:	11 92       	st	Z+, r1
 4d2:	cb 01       	movw	r24, r22
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <strrev>

000004d6 <strrev>:
 4d6:	dc 01       	movw	r26, r24
 4d8:	fc 01       	movw	r30, r24
 4da:	67 2f       	mov	r22, r23
 4dc:	71 91       	ld	r23, Z+
 4de:	77 23       	and	r23, r23
 4e0:	e1 f7       	brne	.-8      	; 0x4da <strrev+0x4>
 4e2:	32 97       	sbiw	r30, 0x02	; 2
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <strrev+0x18>
 4e6:	7c 91       	ld	r23, X
 4e8:	6d 93       	st	X+, r22
 4ea:	70 83       	st	Z, r23
 4ec:	62 91       	ld	r22, -Z
 4ee:	ae 17       	cp	r26, r30
 4f0:	bf 07       	cpc	r27, r31
 4f2:	c8 f3       	brcs	.-14     	; 0x4e6 <strrev+0x10>
 4f4:	08 95       	ret

000004f6 <_exit>:
 4f6:	f8 94       	cli

000004f8 <__stop_program>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <__stop_program>
