
AMS_GSM_MOD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000884  000008f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000884  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010ba  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d85  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047d  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ec  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000382  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003746  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	b7 c3       	rjmp	.+1902   	; 0x880 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
#include "uart.h"
#define myUART UART0
#define baud 9600
#define databits 8

int main(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	cf 5f       	subi	r28, 0xFF	; 255
 11e:	d1 09       	sbc	r29, r1
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
	//InitUART(myUART, baud, databits, 'N');
	InitUART(myUART, 9600, 8, 'N');
 12a:	0e e4       	ldi	r16, 0x4E	; 78
 12c:	28 e0       	ldi	r18, 0x08	; 8
 12e:	40 e8       	ldi	r20, 0x80	; 128
 130:	55 e2       	ldi	r21, 0x25	; 37
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2e d0       	rcall	.+92     	; 0x198 <InitUART>
	SendString(myUART, "This is the first string\r\n");	
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	72 e0       	ldi	r23, 0x02	; 2
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	8c d0       	rcall	.+280    	; 0x25e <SendString>
		while (!CharReady(myUART)){

		}
		char buf[255];
		//char test = ReadChar(myUART);
		sprintf(buf, "res is %c", test);	
 146:	0f 2e       	mov	r0, r31
 148:	f9 e2       	ldi	r31, 0x29	; 41
 14a:	ef 2e       	mov	r14, r31
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	ff 2e       	mov	r15, r31
 150:	f0 2d       	mov	r31, r0
 152:	8e 01       	movw	r16, r28
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
	//InitUART(myUART, baud, databits, 'N');
	InitUART(myUART, 9600, 8, 'N');
	SendString(myUART, "This is the first string\r\n");	
	while(1){
				
		SendString(myUART, "Enter input\r\n");
 158:	6b e1       	ldi	r22, 0x1B	; 27
 15a:	72 e0       	ldi	r23, 0x02	; 2
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	7e d0       	rcall	.+252    	; 0x25e <SendString>
		char test = ReadChar(myUART);
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	6f d0       	rcall	.+222    	; 0x246 <ReadChar>
 168:	d8 2e       	mov	r13, r24
		while (!CharReady(myUART)){
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	67 d0       	rcall	.+206    	; 0x23e <CharReady>
 170:	88 23       	and	r24, r24
 172:	d9 f3       	breq	.-10     	; 0x16a <main+0x56>
 174:	1f 92       	push	r1

		}
		char buf[255];
		//char test = ReadChar(myUART);
		sprintf(buf, "res is %c", test);	
 176:	df 92       	push	r13
 178:	ff 92       	push	r15
 17a:	ef 92       	push	r14
 17c:	1f 93       	push	r17
 17e:	0f 93       	push	r16
 180:	a4 d0       	rcall	.+328    	; 0x2ca <sprintf>
		SendString(myUART, buf);
 182:	b8 01       	movw	r22, r16
 184:	80 ec       	ldi	r24, 0xC0	; 192
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	6a d0       	rcall	.+212    	; 0x25e <SendString>
 18a:	0f 90       	pop	r0
		
	}	
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	e0 cf       	rjmp	.-64     	; 0x158 <main+0x44>

00000198 <InitUART>:
 198:	0f 93       	push	r16
	BaudRate: Wanted Baud Rate (300-115200).
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
*************************************************************************/
void InitUART(unsigned int UART_adr, unsigned long BaudRate, unsigned char DataBit, char Parity)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
  if ((BaudRate >= 300) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 1a0:	db 01       	movw	r26, r22
 1a2:	ca 01       	movw	r24, r20
 1a4:	8c 52       	subi	r24, 0x2C	; 44
 1a6:	91 40       	sbci	r25, 0x01	; 1
 1a8:	a1 09       	sbc	r26, r1
 1aa:	b1 09       	sbc	r27, r1
 1ac:	85 3d       	cpi	r24, 0xD5	; 213
 1ae:	90 4c       	sbci	r25, 0xC0	; 192
 1b0:	a1 40       	sbci	r26, 0x01	; 1
 1b2:	b1 05       	cpc	r27, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <InitUART+0x20>
 1b6:	3f c0       	rjmp	.+126    	; 0x236 <InitUART+0x9e>
 1b8:	25 50       	subi	r18, 0x05	; 5
 1ba:	24 30       	cpi	r18, 0x04	; 4
 1bc:	e0 f5       	brcc	.+120    	; 0x236 <InitUART+0x9e>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSRnA = 0b00100000;
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	88 83       	st	Y, r24
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSRnB = 0b00011000;	
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	89 83       	std	Y+1, r24	; 0x01
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSRnC = (DataBit-5)<<1;
 1c6:	22 0f       	add	r18, r18
 1c8:	2a 83       	std	Y+2, r18	; 0x02
	// Set parity bits (if parity used)
	if (Parity == 'E')
 1ca:	05 34       	cpi	r16, 0x45	; 69
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <InitUART+0x3e>
      UCSRnC |= 0b00100000;
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	8a 83       	std	Y+2, r24	; 0x02
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <InitUART+0x48>
    else if (Parity == 'O')	  
 1d6:	0f 34       	cpi	r16, 0x4F	; 79
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <InitUART+0x48>
      UCSRnC |= 0b00110000;	
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	80 63       	ori	r24, 0x30	; 48
 1de:	8a 83       	std	Y+2, r24	; 0x02
    // Set Baud Rate according to the parameter BaudRate:
    // Adding (8*Baudrate) ensures correct rounding (up/down)
    UBRRn = (XTAL+(8*BaudRate))/(16*BaudRate) - 1;
 1e0:	db 01       	movw	r26, r22
 1e2:	ca 01       	movw	r24, r20
 1e4:	80 58       	subi	r24, 0x80	; 128
 1e6:	9b 47       	sbci	r25, 0x7B	; 123
 1e8:	a1 4e       	sbci	r26, 0xE1	; 225
 1ea:	bf 4f       	sbci	r27, 0xFF	; 255
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	aa 1f       	adc	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	aa 1f       	adc	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	44 0f       	add	r20, r20
 206:	55 1f       	adc	r21, r21
 208:	66 1f       	adc	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	66 1f       	adc	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	9a 01       	movw	r18, r20
 216:	ab 01       	movw	r20, r22
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	44 1f       	adc	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	44 1f       	adc	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	bc 01       	movw	r22, r24
 22a:	cd 01       	movw	r24, r26
 22c:	2c d0       	rcall	.+88     	; 0x286 <__udivmodsi4>
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	31 09       	sbc	r19, r1
 232:	3d 83       	std	Y+5, r19	; 0x05
 234:	2c 83       	std	Y+4, r18	; 0x04
  }  
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <CharReady>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady(unsigned int UART_adr)
{
   return UCSRnA & (1<<7);
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
}
 242:	80 78       	andi	r24, 0x80	; 128
 244:	08 95       	ret

00000246 <ReadChar>:
/*************************************************************************
Awaits new character received.
Then this character is returned.
*************************************************************************/
char ReadChar(unsigned int UART_adr)
{
 246:	fc 01       	movw	r30, r24
  // Wait for new character received
  while ( (UCSRnA & (1<<7)) == 0 )
 248:	90 81       	ld	r25, Z
 24a:	99 23       	and	r25, r25
 24c:	ec f7       	brge	.-6      	; 0x248 <ReadChar+0x2>
  {}                        
  // Then return it
  return UDRn;
 24e:	86 81       	ldd	r24, Z+6	; 0x06
}
 250:	08 95       	ret

00000252 <SendChar>:
Then send the character.
Parameter :
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(unsigned int UART_adr, char Tegn)
{
 252:	fc 01       	movw	r30, r24
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSRnA & (1<<5)) == 0 )
 254:	90 81       	ld	r25, Z
 256:	95 ff       	sbrs	r25, 5
 258:	fd cf       	rjmp	.-6      	; 0x254 <SendChar+0x2>
  {}
  // Then send the character
  UDRn = Tegn;
 25a:	66 83       	std	Z+6, r22	; 0x06
 25c:	08 95       	ret

0000025e <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	eb 01       	movw	r28, r22
  // Repeat until zero-termination
  while (*Streng != 0)
 268:	68 81       	ld	r22, Y
 26a:	66 23       	and	r22, r22
 26c:	39 f0       	breq	.+14     	; 0x27c <SendString+0x1e>
 26e:	8c 01       	movw	r16, r24
 270:	21 96       	adiw	r28, 0x01	; 1
  {
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
 272:	c8 01       	movw	r24, r16
 274:	ee df       	rcall	.-36     	; 0x252 <SendChar>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(unsigned int UART_adr, char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 276:	69 91       	ld	r22, Y+
 278:	61 11       	cpse	r22, r1
 27a:	fb cf       	rjmp	.-10     	; 0x272 <SendString+0x14>
    // Send the character pointed to by "Streng"
    SendChar(UART_adr, *Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <__udivmodsi4>:
 286:	a1 e2       	ldi	r26, 0x21	; 33
 288:	1a 2e       	mov	r1, r26
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	fd 01       	movw	r30, r26
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__udivmodsi4_ep>

00000292 <__udivmodsi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	ee 1f       	adc	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	a2 17       	cp	r26, r18
 29c:	b3 07       	cpc	r27, r19
 29e:	e4 07       	cpc	r30, r20
 2a0:	f5 07       	cpc	r31, r21
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__udivmodsi4_ep>
 2a4:	a2 1b       	sub	r26, r18
 2a6:	b3 0b       	sbc	r27, r19
 2a8:	e4 0b       	sbc	r30, r20
 2aa:	f5 0b       	sbc	r31, r21

000002ac <__udivmodsi4_ep>:
 2ac:	66 1f       	adc	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	1a 94       	dec	r1
 2b6:	69 f7       	brne	.-38     	; 0x292 <__udivmodsi4_loop>
 2b8:	60 95       	com	r22
 2ba:	70 95       	com	r23
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	9b 01       	movw	r18, r22
 2c2:	ac 01       	movw	r20, r24
 2c4:	bd 01       	movw	r22, r26
 2c6:	cf 01       	movw	r24, r30
 2c8:	08 95       	ret

000002ca <sprintf>:
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
 2d6:	2e 97       	sbiw	r28, 0x0e	; 14
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	0e 89       	ldd	r16, Y+22	; 0x16
 2e4:	1f 89       	ldd	r17, Y+23	; 0x17
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	8c 83       	std	Y+4, r24	; 0x04
 2ea:	1a 83       	std	Y+2, r17	; 0x02
 2ec:	09 83       	std	Y+1, r16	; 0x01
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	9f e7       	ldi	r25, 0x7F	; 127
 2f2:	9e 83       	std	Y+6, r25	; 0x06
 2f4:	8d 83       	std	Y+5, r24	; 0x05
 2f6:	ae 01       	movw	r20, r28
 2f8:	46 5e       	subi	r20, 0xE6	; 230
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	68 8d       	ldd	r22, Y+24	; 0x18
 2fe:	79 8d       	ldd	r23, Y+25	; 0x19
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	10 d0       	rcall	.+32     	; 0x326 <vfprintf>
 306:	ef 81       	ldd	r30, Y+7	; 0x07
 308:	f8 85       	ldd	r31, Y+8	; 0x08
 30a:	e0 0f       	add	r30, r16
 30c:	f1 1f       	adc	r31, r17
 30e:	10 82       	st	Z, r1
 310:	2e 96       	adiw	r28, 0x0e	; 14
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <vfprintf>:
 326:	2f 92       	push	r2
 328:	3f 92       	push	r3
 32a:	4f 92       	push	r4
 32c:	5f 92       	push	r5
 32e:	6f 92       	push	r6
 330:	7f 92       	push	r7
 332:	8f 92       	push	r8
 334:	9f 92       	push	r9
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	2b 97       	sbiw	r28, 0x0b	; 11
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	6c 01       	movw	r12, r24
 35c:	7b 01       	movw	r14, r22
 35e:	8a 01       	movw	r16, r20
 360:	fc 01       	movw	r30, r24
 362:	17 82       	std	Z+7, r1	; 0x07
 364:	16 82       	std	Z+6, r1	; 0x06
 366:	83 81       	ldd	r24, Z+3	; 0x03
 368:	81 ff       	sbrs	r24, 1
 36a:	bf c1       	rjmp	.+894    	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 36c:	ce 01       	movw	r24, r28
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	3c 01       	movw	r6, r24
 372:	f6 01       	movw	r30, r12
 374:	93 81       	ldd	r25, Z+3	; 0x03
 376:	f7 01       	movw	r30, r14
 378:	93 fd       	sbrc	r25, 3
 37a:	85 91       	lpm	r24, Z+
 37c:	93 ff       	sbrs	r25, 3
 37e:	81 91       	ld	r24, Z+
 380:	7f 01       	movw	r14, r30
 382:	88 23       	and	r24, r24
 384:	09 f4       	brne	.+2      	; 0x388 <vfprintf+0x62>
 386:	ad c1       	rjmp	.+858    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 388:	85 32       	cpi	r24, 0x25	; 37
 38a:	39 f4       	brne	.+14     	; 0x39a <vfprintf+0x74>
 38c:	93 fd       	sbrc	r25, 3
 38e:	85 91       	lpm	r24, Z+
 390:	93 ff       	sbrs	r25, 3
 392:	81 91       	ld	r24, Z+
 394:	7f 01       	movw	r14, r30
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	21 f4       	brne	.+8      	; 0x3a2 <vfprintf+0x7c>
 39a:	b6 01       	movw	r22, r12
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	d6 d1       	rcall	.+940    	; 0x74c <fputc>
 3a0:	e8 cf       	rjmp	.-48     	; 0x372 <vfprintf+0x4c>
 3a2:	91 2c       	mov	r9, r1
 3a4:	21 2c       	mov	r2, r1
 3a6:	31 2c       	mov	r3, r1
 3a8:	ff e1       	ldi	r31, 0x1F	; 31
 3aa:	f3 15       	cp	r31, r3
 3ac:	d8 f0       	brcs	.+54     	; 0x3e4 <vfprintf+0xbe>
 3ae:	8b 32       	cpi	r24, 0x2B	; 43
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <vfprintf+0xaa>
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <vfprintf+0x9c>
 3b4:	80 32       	cpi	r24, 0x20	; 32
 3b6:	79 f0       	breq	.+30     	; 0x3d6 <vfprintf+0xb0>
 3b8:	83 32       	cpi	r24, 0x23	; 35
 3ba:	a1 f4       	brne	.+40     	; 0x3e4 <vfprintf+0xbe>
 3bc:	23 2d       	mov	r18, r3
 3be:	20 61       	ori	r18, 0x10	; 16
 3c0:	1d c0       	rjmp	.+58     	; 0x3fc <vfprintf+0xd6>
 3c2:	8d 32       	cpi	r24, 0x2D	; 45
 3c4:	61 f0       	breq	.+24     	; 0x3de <vfprintf+0xb8>
 3c6:	80 33       	cpi	r24, 0x30	; 48
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <vfprintf+0xbe>
 3ca:	23 2d       	mov	r18, r3
 3cc:	21 60       	ori	r18, 0x01	; 1
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <vfprintf+0xd6>
 3d0:	83 2d       	mov	r24, r3
 3d2:	82 60       	ori	r24, 0x02	; 2
 3d4:	38 2e       	mov	r3, r24
 3d6:	e3 2d       	mov	r30, r3
 3d8:	e4 60       	ori	r30, 0x04	; 4
 3da:	3e 2e       	mov	r3, r30
 3dc:	2a c0       	rjmp	.+84     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3de:	f3 2d       	mov	r31, r3
 3e0:	f8 60       	ori	r31, 0x08	; 8
 3e2:	1d c0       	rjmp	.+58     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e4:	37 fc       	sbrc	r3, 7
 3e6:	2d c0       	rjmp	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3e8:	20 ed       	ldi	r18, 0xD0	; 208
 3ea:	28 0f       	add	r18, r24
 3ec:	2a 30       	cpi	r18, 0x0A	; 10
 3ee:	40 f0       	brcs	.+16     	; 0x400 <__LOCK_REGION_LENGTH__>
 3f0:	8e 32       	cpi	r24, 0x2E	; 46
 3f2:	b9 f4       	brne	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3f4:	36 fc       	sbrc	r3, 6
 3f6:	75 c1       	rjmp	.+746    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 3f8:	23 2d       	mov	r18, r3
 3fa:	20 64       	ori	r18, 0x40	; 64
 3fc:	32 2e       	mov	r3, r18
 3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 400:	36 fe       	sbrs	r3, 6
 402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	98 9e       	mul	r9, r24
 408:	20 0d       	add	r18, r0
 40a:	11 24       	eor	r1, r1
 40c:	92 2e       	mov	r9, r18
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 410:	ea e0       	ldi	r30, 0x0A	; 10
 412:	2e 9e       	mul	r2, r30
 414:	20 0d       	add	r18, r0
 416:	11 24       	eor	r1, r1
 418:	22 2e       	mov	r2, r18
 41a:	f3 2d       	mov	r31, r3
 41c:	f0 62       	ori	r31, 0x20	; 32
 41e:	3f 2e       	mov	r3, r31
 420:	08 c0       	rjmp	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 422:	8c 36       	cpi	r24, 0x6C	; 108
 424:	21 f4       	brne	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 426:	83 2d       	mov	r24, r3
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	38 2e       	mov	r3, r24
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	88 36       	cpi	r24, 0x68	; 104
 430:	41 f4       	brne	.+16     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 432:	f7 01       	movw	r30, r14
 434:	93 fd       	sbrc	r25, 3
 436:	85 91       	lpm	r24, Z+
 438:	93 ff       	sbrs	r25, 3
 43a:	81 91       	ld	r24, Z+
 43c:	7f 01       	movw	r14, r30
 43e:	81 11       	cpse	r24, r1
 440:	b3 cf       	rjmp	.-154    	; 0x3a8 <vfprintf+0x82>
 442:	98 2f       	mov	r25, r24
 444:	9f 7d       	andi	r25, 0xDF	; 223
 446:	95 54       	subi	r25, 0x45	; 69
 448:	93 30       	cpi	r25, 0x03	; 3
 44a:	28 f4       	brcc	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44c:	0c 5f       	subi	r16, 0xFC	; 252
 44e:	1f 4f       	sbci	r17, 0xFF	; 255
 450:	9f e3       	ldi	r25, 0x3F	; 63
 452:	99 83       	std	Y+1, r25	; 0x01
 454:	0d c0       	rjmp	.+26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 456:	83 36       	cpi	r24, 0x63	; 99
 458:	31 f0       	breq	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45a:	83 37       	cpi	r24, 0x73	; 115
 45c:	71 f0       	breq	.+28     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45e:	83 35       	cpi	r24, 0x53	; 83
 460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	55 c0       	rjmp	.+170    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 464:	20 c0       	rjmp	.+64     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z
 46a:	89 83       	std	Y+1, r24	; 0x01
 46c:	0e 5f       	subi	r16, 0xFE	; 254
 46e:	1f 4f       	sbci	r17, 0xFF	; 255
 470:	88 24       	eor	r8, r8
 472:	83 94       	inc	r8
 474:	91 2c       	mov	r9, r1
 476:	53 01       	movw	r10, r6
 478:	12 c0       	rjmp	.+36     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 47a:	28 01       	movw	r4, r16
 47c:	f2 e0       	ldi	r31, 0x02	; 2
 47e:	4f 0e       	add	r4, r31
 480:	51 1c       	adc	r5, r1
 482:	f8 01       	movw	r30, r16
 484:	a0 80       	ld	r10, Z
 486:	b1 80       	ldd	r11, Z+1	; 0x01
 488:	36 fe       	sbrs	r3, 6
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48c:	69 2d       	mov	r22, r9
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 492:	6f ef       	ldi	r22, 0xFF	; 255
 494:	7f ef       	ldi	r23, 0xFF	; 255
 496:	c5 01       	movw	r24, r10
 498:	4e d1       	rcall	.+668    	; 0x736 <strnlen>
 49a:	4c 01       	movw	r8, r24
 49c:	82 01       	movw	r16, r4
 49e:	f3 2d       	mov	r31, r3
 4a0:	ff 77       	andi	r31, 0x7F	; 127
 4a2:	3f 2e       	mov	r3, r31
 4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4a6:	28 01       	movw	r4, r16
 4a8:	22 e0       	ldi	r18, 0x02	; 2
 4aa:	42 0e       	add	r4, r18
 4ac:	51 1c       	adc	r5, r1
 4ae:	f8 01       	movw	r30, r16
 4b0:	a0 80       	ld	r10, Z
 4b2:	b1 80       	ldd	r11, Z+1	; 0x01
 4b4:	36 fe       	sbrs	r3, 6
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4b8:	69 2d       	mov	r22, r9
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4be:	6f ef       	ldi	r22, 0xFF	; 255
 4c0:	7f ef       	ldi	r23, 0xFF	; 255
 4c2:	c5 01       	movw	r24, r10
 4c4:	2d d1       	rcall	.+602    	; 0x720 <strnlen_P>
 4c6:	4c 01       	movw	r8, r24
 4c8:	f3 2d       	mov	r31, r3
 4ca:	f0 68       	ori	r31, 0x80	; 128
 4cc:	3f 2e       	mov	r3, r31
 4ce:	82 01       	movw	r16, r4
 4d0:	33 fc       	sbrc	r3, 3
 4d2:	19 c0       	rjmp	.+50     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4d4:	82 2d       	mov	r24, r2
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	88 16       	cp	r8, r24
 4da:	99 06       	cpc	r9, r25
 4dc:	a0 f4       	brcc	.+40     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 4de:	b6 01       	movw	r22, r12
 4e0:	80 e2       	ldi	r24, 0x20	; 32
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	33 d1       	rcall	.+614    	; 0x74c <fputc>
 4e6:	2a 94       	dec	r2
 4e8:	f5 cf       	rjmp	.-22     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4ea:	f5 01       	movw	r30, r10
 4ec:	37 fc       	sbrc	r3, 7
 4ee:	85 91       	lpm	r24, Z+
 4f0:	37 fe       	sbrs	r3, 7
 4f2:	81 91       	ld	r24, Z+
 4f4:	5f 01       	movw	r10, r30
 4f6:	b6 01       	movw	r22, r12
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	28 d1       	rcall	.+592    	; 0x74c <fputc>
 4fc:	21 10       	cpse	r2, r1
 4fe:	2a 94       	dec	r2
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	82 1a       	sub	r8, r18
 504:	91 08       	sbc	r9, r1
 506:	81 14       	cp	r8, r1
 508:	91 04       	cpc	r9, r1
 50a:	79 f7       	brne	.-34     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 50c:	e1 c0       	rjmp	.+450    	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 50e:	84 36       	cpi	r24, 0x64	; 100
 510:	11 f0       	breq	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	89 36       	cpi	r24, 0x69	; 105
 514:	39 f5       	brne	.+78     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 516:	f8 01       	movw	r30, r16
 518:	37 fe       	sbrs	r3, 7
 51a:	07 c0       	rjmp	.+14     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 51c:	60 81       	ld	r22, Z
 51e:	71 81       	ldd	r23, Z+1	; 0x01
 520:	82 81       	ldd	r24, Z+2	; 0x02
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	0c 5f       	subi	r16, 0xFC	; 252
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	08 c0       	rjmp	.+16     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 52a:	60 81       	ld	r22, Z
 52c:	71 81       	ldd	r23, Z+1	; 0x01
 52e:	07 2e       	mov	r0, r23
 530:	00 0c       	add	r0, r0
 532:	88 0b       	sbc	r24, r24
 534:	99 0b       	sbc	r25, r25
 536:	0e 5f       	subi	r16, 0xFE	; 254
 538:	1f 4f       	sbci	r17, 0xFF	; 255
 53a:	f3 2d       	mov	r31, r3
 53c:	ff 76       	andi	r31, 0x6F	; 111
 53e:	3f 2e       	mov	r3, r31
 540:	97 ff       	sbrs	r25, 7
 542:	09 c0       	rjmp	.+18     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 544:	90 95       	com	r25
 546:	80 95       	com	r24
 548:	70 95       	com	r23
 54a:	61 95       	neg	r22
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	8f 4f       	sbci	r24, 0xFF	; 255
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	f0 68       	ori	r31, 0x80	; 128
 554:	3f 2e       	mov	r3, r31
 556:	2a e0       	ldi	r18, 0x0A	; 10
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	a3 01       	movw	r20, r6
 55c:	33 d1       	rcall	.+614    	; 0x7c4 <__ultoa_invert>
 55e:	88 2e       	mov	r8, r24
 560:	86 18       	sub	r8, r6
 562:	44 c0       	rjmp	.+136    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 564:	85 37       	cpi	r24, 0x75	; 117
 566:	31 f4       	brne	.+12     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 568:	23 2d       	mov	r18, r3
 56a:	2f 7e       	andi	r18, 0xEF	; 239
 56c:	b2 2e       	mov	r11, r18
 56e:	2a e0       	ldi	r18, 0x0A	; 10
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	25 c0       	rjmp	.+74     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 574:	93 2d       	mov	r25, r3
 576:	99 7f       	andi	r25, 0xF9	; 249
 578:	b9 2e       	mov	r11, r25
 57a:	8f 36       	cpi	r24, 0x6F	; 111
 57c:	c1 f0       	breq	.+48     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 57e:	18 f4       	brcc	.+6      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 580:	88 35       	cpi	r24, 0x58	; 88
 582:	79 f0       	breq	.+30     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 584:	ae c0       	rjmp	.+348    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 586:	80 37       	cpi	r24, 0x70	; 112
 588:	19 f0       	breq	.+6      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 58a:	88 37       	cpi	r24, 0x78	; 120
 58c:	21 f0       	breq	.+8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 58e:	a9 c0       	rjmp	.+338    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 590:	e9 2f       	mov	r30, r25
 592:	e0 61       	ori	r30, 0x10	; 16
 594:	be 2e       	mov	r11, r30
 596:	b4 fe       	sbrs	r11, 4
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 59a:	fb 2d       	mov	r31, r11
 59c:	f4 60       	ori	r31, 0x04	; 4
 59e:	bf 2e       	mov	r11, r31
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5a2:	34 fe       	sbrs	r3, 4
 5a4:	0a c0       	rjmp	.+20     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5a6:	29 2f       	mov	r18, r25
 5a8:	26 60       	ori	r18, 0x06	; 6
 5aa:	b2 2e       	mov	r11, r18
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5ae:	28 e0       	ldi	r18, 0x08	; 8
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5b4:	20 e1       	ldi	r18, 0x10	; 16
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ba:	20 e1       	ldi	r18, 0x10	; 16
 5bc:	32 e0       	ldi	r19, 0x02	; 2
 5be:	f8 01       	movw	r30, r16
 5c0:	b7 fe       	sbrs	r11, 7
 5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c4:	60 81       	ld	r22, Z
 5c6:	71 81       	ldd	r23, Z+1	; 0x01
 5c8:	82 81       	ldd	r24, Z+2	; 0x02
 5ca:	93 81       	ldd	r25, Z+3	; 0x03
 5cc:	0c 5f       	subi	r16, 0xFC	; 252
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	06 c0       	rjmp	.+12     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5d2:	60 81       	ld	r22, Z
 5d4:	71 81       	ldd	r23, Z+1	; 0x01
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 5f       	subi	r16, 0xFE	; 254
 5dc:	1f 4f       	sbci	r17, 0xFF	; 255
 5de:	a3 01       	movw	r20, r6
 5e0:	f1 d0       	rcall	.+482    	; 0x7c4 <__ultoa_invert>
 5e2:	88 2e       	mov	r8, r24
 5e4:	86 18       	sub	r8, r6
 5e6:	fb 2d       	mov	r31, r11
 5e8:	ff 77       	andi	r31, 0x7F	; 127
 5ea:	3f 2e       	mov	r3, r31
 5ec:	36 fe       	sbrs	r3, 6
 5ee:	0d c0       	rjmp	.+26     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 5f0:	23 2d       	mov	r18, r3
 5f2:	2e 7f       	andi	r18, 0xFE	; 254
 5f4:	a2 2e       	mov	r10, r18
 5f6:	89 14       	cp	r8, r9
 5f8:	58 f4       	brcc	.+22     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fa:	34 fe       	sbrs	r3, 4
 5fc:	0b c0       	rjmp	.+22     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 5fe:	32 fc       	sbrc	r3, 2
 600:	09 c0       	rjmp	.+18     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 602:	83 2d       	mov	r24, r3
 604:	8e 7e       	andi	r24, 0xEE	; 238
 606:	a8 2e       	mov	r10, r24
 608:	05 c0       	rjmp	.+10     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 60a:	b8 2c       	mov	r11, r8
 60c:	a3 2c       	mov	r10, r3
 60e:	03 c0       	rjmp	.+6      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 610:	b8 2c       	mov	r11, r8
 612:	01 c0       	rjmp	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 614:	b9 2c       	mov	r11, r9
 616:	a4 fe       	sbrs	r10, 4
 618:	0f c0       	rjmp	.+30     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 61a:	fe 01       	movw	r30, r28
 61c:	e8 0d       	add	r30, r8
 61e:	f1 1d       	adc	r31, r1
 620:	80 81       	ld	r24, Z
 622:	80 33       	cpi	r24, 0x30	; 48
 624:	21 f4       	brne	.+8      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 626:	9a 2d       	mov	r25, r10
 628:	99 7e       	andi	r25, 0xE9	; 233
 62a:	a9 2e       	mov	r10, r25
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62e:	a2 fe       	sbrs	r10, 2
 630:	06 c0       	rjmp	.+12     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 632:	b3 94       	inc	r11
 634:	b3 94       	inc	r11
 636:	04 c0       	rjmp	.+8      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 638:	8a 2d       	mov	r24, r10
 63a:	86 78       	andi	r24, 0x86	; 134
 63c:	09 f0       	breq	.+2      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 63e:	b3 94       	inc	r11
 640:	a3 fc       	sbrc	r10, 3
 642:	10 c0       	rjmp	.+32     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 644:	a0 fe       	sbrs	r10, 0
 646:	06 c0       	rjmp	.+12     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 648:	b2 14       	cp	r11, r2
 64a:	80 f4       	brcc	.+32     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 64c:	28 0c       	add	r2, r8
 64e:	92 2c       	mov	r9, r2
 650:	9b 18       	sub	r9, r11
 652:	0d c0       	rjmp	.+26     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 654:	b2 14       	cp	r11, r2
 656:	58 f4       	brcc	.+22     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 658:	b6 01       	movw	r22, r12
 65a:	80 e2       	ldi	r24, 0x20	; 32
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	76 d0       	rcall	.+236    	; 0x74c <fputc>
 660:	b3 94       	inc	r11
 662:	f8 cf       	rjmp	.-16     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 664:	b2 14       	cp	r11, r2
 666:	18 f4       	brcc	.+6      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 668:	2b 18       	sub	r2, r11
 66a:	02 c0       	rjmp	.+4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66c:	98 2c       	mov	r9, r8
 66e:	21 2c       	mov	r2, r1
 670:	a4 fe       	sbrs	r10, 4
 672:	0f c0       	rjmp	.+30     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 674:	b6 01       	movw	r22, r12
 676:	80 e3       	ldi	r24, 0x30	; 48
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	68 d0       	rcall	.+208    	; 0x74c <fputc>
 67c:	a2 fe       	sbrs	r10, 2
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 680:	a1 fc       	sbrc	r10, 1
 682:	03 c0       	rjmp	.+6      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 684:	88 e7       	ldi	r24, 0x78	; 120
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68a:	88 e5       	ldi	r24, 0x58	; 88
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	b6 01       	movw	r22, r12
 690:	0c c0       	rjmp	.+24     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 692:	8a 2d       	mov	r24, r10
 694:	86 78       	andi	r24, 0x86	; 134
 696:	51 f0       	breq	.+20     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 698:	a1 fe       	sbrs	r10, 1
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 69c:	8b e2       	ldi	r24, 0x2B	; 43
 69e:	01 c0       	rjmp	.+2      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	a7 fc       	sbrc	r10, 7
 6a4:	8d e2       	ldi	r24, 0x2D	; 45
 6a6:	b6 01       	movw	r22, r12
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	50 d0       	rcall	.+160    	; 0x74c <fputc>
 6ac:	89 14       	cp	r8, r9
 6ae:	30 f4       	brcc	.+12     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6b0:	b6 01       	movw	r22, r12
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	4a d0       	rcall	.+148    	; 0x74c <fputc>
 6b8:	9a 94       	dec	r9
 6ba:	f8 cf       	rjmp	.-16     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6bc:	8a 94       	dec	r8
 6be:	f3 01       	movw	r30, r6
 6c0:	e8 0d       	add	r30, r8
 6c2:	f1 1d       	adc	r31, r1
 6c4:	80 81       	ld	r24, Z
 6c6:	b6 01       	movw	r22, r12
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	40 d0       	rcall	.+128    	; 0x74c <fputc>
 6cc:	81 10       	cpse	r8, r1
 6ce:	f6 cf       	rjmp	.-20     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6d0:	22 20       	and	r2, r2
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
 6d4:	4e ce       	rjmp	.-868    	; 0x372 <vfprintf+0x4c>
 6d6:	b6 01       	movw	r22, r12
 6d8:	80 e2       	ldi	r24, 0x20	; 32
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	37 d0       	rcall	.+110    	; 0x74c <fputc>
 6de:	2a 94       	dec	r2
 6e0:	f7 cf       	rjmp	.-18     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
 6e2:	f6 01       	movw	r30, r12
 6e4:	86 81       	ldd	r24, Z+6	; 0x06
 6e6:	97 81       	ldd	r25, Z+7	; 0x07
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	9f ef       	ldi	r25, 0xFF	; 255
 6ee:	2b 96       	adiw	r28, 0x0b	; 11
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	bf 90       	pop	r11
 70c:	af 90       	pop	r10
 70e:	9f 90       	pop	r9
 710:	8f 90       	pop	r8
 712:	7f 90       	pop	r7
 714:	6f 90       	pop	r6
 716:	5f 90       	pop	r5
 718:	4f 90       	pop	r4
 71a:	3f 90       	pop	r3
 71c:	2f 90       	pop	r2
 71e:	08 95       	ret

00000720 <strnlen_P>:
 720:	fc 01       	movw	r30, r24
 722:	05 90       	lpm	r0, Z+
 724:	61 50       	subi	r22, 0x01	; 1
 726:	70 40       	sbci	r23, 0x00	; 0
 728:	01 10       	cpse	r0, r1
 72a:	d8 f7       	brcc	.-10     	; 0x722 <strnlen_P+0x2>
 72c:	80 95       	com	r24
 72e:	90 95       	com	r25
 730:	8e 0f       	add	r24, r30
 732:	9f 1f       	adc	r25, r31
 734:	08 95       	ret

00000736 <strnlen>:
 736:	fc 01       	movw	r30, r24
 738:	61 50       	subi	r22, 0x01	; 1
 73a:	70 40       	sbci	r23, 0x00	; 0
 73c:	01 90       	ld	r0, Z+
 73e:	01 10       	cpse	r0, r1
 740:	d8 f7       	brcc	.-10     	; 0x738 <strnlen+0x2>
 742:	80 95       	com	r24
 744:	90 95       	com	r25
 746:	8e 0f       	add	r24, r30
 748:	9f 1f       	adc	r25, r31
 74a:	08 95       	ret

0000074c <fputc>:
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	fb 01       	movw	r30, r22
 756:	23 81       	ldd	r18, Z+3	; 0x03
 758:	21 fd       	sbrc	r18, 1
 75a:	03 c0       	rjmp	.+6      	; 0x762 <fputc+0x16>
 75c:	8f ef       	ldi	r24, 0xFF	; 255
 75e:	9f ef       	ldi	r25, 0xFF	; 255
 760:	2c c0       	rjmp	.+88     	; 0x7ba <fputc+0x6e>
 762:	22 ff       	sbrs	r18, 2
 764:	16 c0       	rjmp	.+44     	; 0x792 <fputc+0x46>
 766:	46 81       	ldd	r20, Z+6	; 0x06
 768:	57 81       	ldd	r21, Z+7	; 0x07
 76a:	24 81       	ldd	r18, Z+4	; 0x04
 76c:	35 81       	ldd	r19, Z+5	; 0x05
 76e:	42 17       	cp	r20, r18
 770:	53 07       	cpc	r21, r19
 772:	44 f4       	brge	.+16     	; 0x784 <fputc+0x38>
 774:	a0 81       	ld	r26, Z
 776:	b1 81       	ldd	r27, Z+1	; 0x01
 778:	9d 01       	movw	r18, r26
 77a:	2f 5f       	subi	r18, 0xFF	; 255
 77c:	3f 4f       	sbci	r19, 0xFF	; 255
 77e:	31 83       	std	Z+1, r19	; 0x01
 780:	20 83       	st	Z, r18
 782:	8c 93       	st	X, r24
 784:	26 81       	ldd	r18, Z+6	; 0x06
 786:	37 81       	ldd	r19, Z+7	; 0x07
 788:	2f 5f       	subi	r18, 0xFF	; 255
 78a:	3f 4f       	sbci	r19, 0xFF	; 255
 78c:	37 83       	std	Z+7, r19	; 0x07
 78e:	26 83       	std	Z+6, r18	; 0x06
 790:	14 c0       	rjmp	.+40     	; 0x7ba <fputc+0x6e>
 792:	8b 01       	movw	r16, r22
 794:	ec 01       	movw	r28, r24
 796:	fb 01       	movw	r30, r22
 798:	00 84       	ldd	r0, Z+8	; 0x08
 79a:	f1 85       	ldd	r31, Z+9	; 0x09
 79c:	e0 2d       	mov	r30, r0
 79e:	19 95       	eicall
 7a0:	89 2b       	or	r24, r25
 7a2:	e1 f6       	brne	.-72     	; 0x75c <fputc+0x10>
 7a4:	d8 01       	movw	r26, r16
 7a6:	16 96       	adiw	r26, 0x06	; 6
 7a8:	8d 91       	ld	r24, X+
 7aa:	9c 91       	ld	r25, X
 7ac:	17 97       	sbiw	r26, 0x07	; 7
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	17 96       	adiw	r26, 0x07	; 7
 7b2:	9c 93       	st	X, r25
 7b4:	8e 93       	st	-X, r24
 7b6:	16 97       	sbiw	r26, 0x06	; 6
 7b8:	ce 01       	movw	r24, r28
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	08 95       	ret

000007c4 <__ultoa_invert>:
 7c4:	fa 01       	movw	r30, r20
 7c6:	aa 27       	eor	r26, r26
 7c8:	28 30       	cpi	r18, 0x08	; 8
 7ca:	51 f1       	breq	.+84     	; 0x820 <__ultoa_invert+0x5c>
 7cc:	20 31       	cpi	r18, 0x10	; 16
 7ce:	81 f1       	breq	.+96     	; 0x830 <__ultoa_invert+0x6c>
 7d0:	e8 94       	clt
 7d2:	6f 93       	push	r22
 7d4:	6e 7f       	andi	r22, 0xFE	; 254
 7d6:	6e 5f       	subi	r22, 0xFE	; 254
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	af 4f       	sbci	r26, 0xFF	; 255
 7e0:	b1 e0       	ldi	r27, 0x01	; 1
 7e2:	3e d0       	rcall	.+124    	; 0x860 <__ultoa_invert+0x9c>
 7e4:	b4 e0       	ldi	r27, 0x04	; 4
 7e6:	3c d0       	rcall	.+120    	; 0x860 <__ultoa_invert+0x9c>
 7e8:	67 0f       	add	r22, r23
 7ea:	78 1f       	adc	r23, r24
 7ec:	89 1f       	adc	r24, r25
 7ee:	9a 1f       	adc	r25, r26
 7f0:	a1 1d       	adc	r26, r1
 7f2:	68 0f       	add	r22, r24
 7f4:	79 1f       	adc	r23, r25
 7f6:	8a 1f       	adc	r24, r26
 7f8:	91 1d       	adc	r25, r1
 7fa:	a1 1d       	adc	r26, r1
 7fc:	6a 0f       	add	r22, r26
 7fe:	71 1d       	adc	r23, r1
 800:	81 1d       	adc	r24, r1
 802:	91 1d       	adc	r25, r1
 804:	a1 1d       	adc	r26, r1
 806:	20 d0       	rcall	.+64     	; 0x848 <__ultoa_invert+0x84>
 808:	09 f4       	brne	.+2      	; 0x80c <__ultoa_invert+0x48>
 80a:	68 94       	set
 80c:	3f 91       	pop	r19
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	26 9f       	mul	r18, r22
 812:	11 24       	eor	r1, r1
 814:	30 19       	sub	r19, r0
 816:	30 5d       	subi	r19, 0xD0	; 208
 818:	31 93       	st	Z+, r19
 81a:	de f6       	brtc	.-74     	; 0x7d2 <__ultoa_invert+0xe>
 81c:	cf 01       	movw	r24, r30
 81e:	08 95       	ret
 820:	46 2f       	mov	r20, r22
 822:	47 70       	andi	r20, 0x07	; 7
 824:	40 5d       	subi	r20, 0xD0	; 208
 826:	41 93       	st	Z+, r20
 828:	b3 e0       	ldi	r27, 0x03	; 3
 82a:	0f d0       	rcall	.+30     	; 0x84a <__ultoa_invert+0x86>
 82c:	c9 f7       	brne	.-14     	; 0x820 <__ultoa_invert+0x5c>
 82e:	f6 cf       	rjmp	.-20     	; 0x81c <__ultoa_invert+0x58>
 830:	46 2f       	mov	r20, r22
 832:	4f 70       	andi	r20, 0x0F	; 15
 834:	40 5d       	subi	r20, 0xD0	; 208
 836:	4a 33       	cpi	r20, 0x3A	; 58
 838:	18 f0       	brcs	.+6      	; 0x840 <__ultoa_invert+0x7c>
 83a:	49 5d       	subi	r20, 0xD9	; 217
 83c:	31 fd       	sbrc	r19, 1
 83e:	40 52       	subi	r20, 0x20	; 32
 840:	41 93       	st	Z+, r20
 842:	02 d0       	rcall	.+4      	; 0x848 <__ultoa_invert+0x84>
 844:	a9 f7       	brne	.-22     	; 0x830 <__ultoa_invert+0x6c>
 846:	ea cf       	rjmp	.-44     	; 0x81c <__ultoa_invert+0x58>
 848:	b4 e0       	ldi	r27, 0x04	; 4
 84a:	a6 95       	lsr	r26
 84c:	97 95       	ror	r25
 84e:	87 95       	ror	r24
 850:	77 95       	ror	r23
 852:	67 95       	ror	r22
 854:	ba 95       	dec	r27
 856:	c9 f7       	brne	.-14     	; 0x84a <__ultoa_invert+0x86>
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	61 05       	cpc	r22, r1
 85c:	71 05       	cpc	r23, r1
 85e:	08 95       	ret
 860:	9b 01       	movw	r18, r22
 862:	ac 01       	movw	r20, r24
 864:	0a 2e       	mov	r0, r26
 866:	06 94       	lsr	r0
 868:	57 95       	ror	r21
 86a:	47 95       	ror	r20
 86c:	37 95       	ror	r19
 86e:	27 95       	ror	r18
 870:	ba 95       	dec	r27
 872:	c9 f7       	brne	.-14     	; 0x866 <__ultoa_invert+0xa2>
 874:	62 0f       	add	r22, r18
 876:	73 1f       	adc	r23, r19
 878:	84 1f       	adc	r24, r20
 87a:	95 1f       	adc	r25, r21
 87c:	a0 1d       	adc	r26, r0
 87e:	08 95       	ret

00000880 <_exit>:
 880:	f8 94       	cli

00000882 <__stop_program>:
 882:	ff cf       	rjmp	.-2      	; 0x882 <__stop_program>
