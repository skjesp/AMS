
AMS_GSM_MOD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000037c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc1  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c24  00000000  00000000  00001291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e7  00000000  00000000  00001eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00002a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002bb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	18 d1       	rcall	.+560    	; 0x340 <main>
 110:	33 c1       	rjmp	.+614    	; 0x378 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <EnableUART>:
		{}
		// Then send the character
		UDR1 = *str;
		str++;	
	}
}
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	9a 81       	ldd	r25, Y+2	; 0x02
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	21 f1       	breq	.+72     	; 0x176 <EnableUART+0x62>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	91 05       	cpc	r25, r1
 132:	1c f4       	brge	.+6      	; 0x13a <EnableUART+0x26>
 134:	89 2b       	or	r24, r25
 136:	41 f0       	breq	.+16     	; 0x148 <EnableUART+0x34>
 138:	4d c0       	rjmp	.+154    	; 0x1d4 <EnableUART+0xc0>
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	91 05       	cpc	r25, r1
 13e:	91 f1       	breq	.+100    	; 0x1a4 <EnableUART+0x90>
 140:	03 97       	sbiw	r24, 0x03	; 3
 142:	09 f4       	brne	.+2      	; 0x146 <EnableUART+0x32>
 144:	46 c0       	rjmp	.+140    	; 0x1d2 <EnableUART+0xbe>
 146:	46 c0       	rjmp	.+140    	; 0x1d4 <EnableUART+0xc0>
 148:	80 ec       	ldi	r24, 0xC0	; 192
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	20 e2       	ldi	r18, 0x20	; 32
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	81 ec       	ldi	r24, 0xC1	; 193
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	28 e1       	ldi	r18, 0x18	; 24
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	82 ec       	ldi	r24, 0xC2	; 194
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	26 e0       	ldi	r18, 0x06	; 6
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
 166:	84 ec       	ldi	r24, 0xC4	; 196
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	27 e6       	ldi	r18, 0x67	; 103
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	31 83       	std	Z+1, r19	; 0x01
 172:	20 83       	st	Z, r18
 174:	2f c0       	rjmp	.+94     	; 0x1d4 <EnableUART+0xc0>
 176:	88 ec       	ldi	r24, 0xC8	; 200
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	20 e2       	ldi	r18, 0x20	; 32
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	89 ec       	ldi	r24, 0xC9	; 201
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	28 e1       	ldi	r18, 0x18	; 24
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	8a ec       	ldi	r24, 0xCA	; 202
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	26 e0       	ldi	r18, 0x06	; 6
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
 194:	8c ec       	ldi	r24, 0xCC	; 204
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	27 e6       	ldi	r18, 0x67	; 103
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	31 83       	std	Z+1, r19	; 0x01
 1a0:	20 83       	st	Z, r18
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <EnableUART+0xc0>
 1a4:	80 ed       	ldi	r24, 0xD0	; 208
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	20 e2       	ldi	r18, 0x20	; 32
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	81 ed       	ldi	r24, 0xD1	; 209
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	28 e1       	ldi	r18, 0x18	; 24
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
 1b8:	82 ed       	ldi	r24, 0xD2	; 210
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	26 e0       	ldi	r18, 0x06	; 6
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
 1c2:	84 ed       	ldi	r24, 0xD4	; 212
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	27 e6       	ldi	r18, 0x67	; 103
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	31 83       	std	Z+1, r19	; 0x01
 1ce:	20 83       	st	Z, r18
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <EnableUART+0xc0>
 1d2:	00 00       	nop
 1d4:	00 00       	nop
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <ReadChar>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	1f 92       	push	r1
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	91 05       	cpc	r25, r1
 1f8:	a1 f0       	breq	.+40     	; 0x222 <ReadChar+0x42>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	91 05       	cpc	r25, r1
 1fe:	e9 f0       	breq	.+58     	; 0x23a <ReadChar+0x5a>
 200:	89 2b       	or	r24, r25
 202:	19 f0       	breq	.+6      	; 0x20a <ReadChar+0x2a>
 204:	00 00       	nop
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	23 c0       	rjmp	.+70     	; 0x250 <ReadChar+0x70>
 20a:	00 00       	nop
 20c:	80 ec       	ldi	r24, 0xC0	; 192
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	d4 f7       	brge	.-12     	; 0x20c <ReadChar+0x2c>
 218:	86 ec       	ldi	r24, 0xC6	; 198
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	17 c0       	rjmp	.+46     	; 0x250 <ReadChar+0x70>
 222:	00 00       	nop
 224:	88 ec       	ldi	r24, 0xC8	; 200
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	88 23       	and	r24, r24
 22e:	d4 f7       	brge	.-12     	; 0x224 <ReadChar+0x44>
 230:	8e ec       	ldi	r24, 0xCE	; 206
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	fc 01       	movw	r30, r24
 236:	80 81       	ld	r24, Z
 238:	0b c0       	rjmp	.+22     	; 0x250 <ReadChar+0x70>
 23a:	00 00       	nop
 23c:	80 ed       	ldi	r24, 0xD0	; 208
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	d4 f7       	brge	.-12     	; 0x23c <ReadChar+0x5c>
 248:	86 ed       	ldi	r24, 0xD6	; 214
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <SendChar>:
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <SendChar+0x6>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	9a 83       	std	Y+2, r25	; 0x02
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	6b 83       	std	Y+3, r22	; 0x03
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	9a 81       	ldd	r25, Y+2	; 0x02
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	91 05       	cpc	r25, r1
 272:	b9 f0       	breq	.+46     	; 0x2a2 <SendChar+0x48>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	91 05       	cpc	r25, r1
 278:	29 f1       	breq	.+74     	; 0x2c4 <SendChar+0x6a>
 27a:	89 2b       	or	r24, r25
 27c:	09 f0       	breq	.+2      	; 0x280 <SendChar+0x26>
 27e:	33 c0       	rjmp	.+102    	; 0x2e6 <SendChar+0x8c>
 280:	00 00       	nop
 282:	80 ec       	ldi	r24, 0xC0	; 192
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 72       	andi	r24, 0x20	; 32
 290:	99 27       	eor	r25, r25
 292:	89 2b       	or	r24, r25
 294:	b1 f3       	breq	.-20     	; 0x282 <SendChar+0x28>
 296:	86 ec       	ldi	r24, 0xC6	; 198
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2b 81       	ldd	r18, Y+3	; 0x03
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
 2a0:	22 c0       	rjmp	.+68     	; 0x2e6 <SendChar+0x8c>
 2a2:	00 00       	nop
 2a4:	88 ec       	ldi	r24, 0xC8	; 200
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	88 2f       	mov	r24, r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	80 72       	andi	r24, 0x20	; 32
 2b2:	99 27       	eor	r25, r25
 2b4:	89 2b       	or	r24, r25
 2b6:	b1 f3       	breq	.-20     	; 0x2a4 <SendChar+0x4a>
 2b8:	8e ec       	ldi	r24, 0xCE	; 206
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <SendChar+0x8c>
 2c4:	00 00       	nop
 2c6:	80 ed       	ldi	r24, 0xD0	; 208
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	80 81       	ld	r24, Z
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	80 72       	andi	r24, 0x20	; 32
 2d4:	99 27       	eor	r25, r25
 2d6:	89 2b       	or	r24, r25
 2d8:	b1 f3       	breq	.-20     	; 0x2c6 <SendChar+0x6c>
 2da:	86 ed       	ldi	r24, 0xD6	; 214
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	2b 81       	ldd	r18, Y+3	; 0x03
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	00 00       	nop
 2e6:	00 00       	nop
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <SendString>:



// Modified code from uart.c from BB.
void SendString(int uartNum, char* str)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <SendString+0x6>
 2fa:	1f 92       	push	r1
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	7c 83       	std	Y+4, r23	; 0x04
 306:	6b 83       	std	Y+3, r22	; 0x03
	while(*str != 0)
 308:	0d c0       	rjmp	.+26     	; 0x324 <SendString+0x30>
	{
		// Send the character pointed to by "Streng"
		SendChar(uartNum, *str);
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	9c 81       	ldd	r25, Y+4	; 0x04
 30e:	fc 01       	movw	r30, r24
 310:	20 81       	ld	r18, Z
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	62 2f       	mov	r22, r18
 318:	a0 df       	rcall	.-192    	; 0x25a <SendChar>
		// Advance the pointer one step
		str++;			
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	9c 81       	ldd	r25, Y+4	; 0x04
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	9c 83       	std	Y+4, r25	; 0x04
 322:	8b 83       	std	Y+3, r24	; 0x03


// Modified code from uart.c from BB.
void SendString(int uartNum, char* str)
{
	while(*str != 0)
 324:	8b 81       	ldd	r24, Y+3	; 0x03
 326:	9c 81       	ldd	r25, Y+4	; 0x04
 328:	fc 01       	movw	r30, r24
 32a:	80 81       	ld	r24, Z
 32c:	88 23       	and	r24, r24
 32e:	69 f7       	brne	.-38     	; 0x30a <SendString+0x16>
		// Send the character pointed to by "Streng"
		SendChar(uartNum, *str);
		// Advance the pointer one step
		str++;			
	}	
 330:	00 00       	nop
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <main>:
#define F_CPU 16000000

#define databits 8
#define INPUT_MAX 255

int main(){
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	1f 92       	push	r1
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	//InitUART(myUART, baud, databits, 'N');
	//InitUART(UART_PC, 112500, 8, 'N'); // 9600
	//InitUART(UART_GSM, 112500, 8, 'N');
	//InitUART(UART_TEST, 112500, 8, 'N');
	
	EnableUART(UART_PC);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	e2 de       	rcall	.-572    	; 0x114 <EnableUART>
	EnableUART(UART_GSM);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	df de       	rcall	.-578    	; 0x114 <EnableUART>
	EnableUART(UART_TEST);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	dc de       	rcall	.-584    	; 0x114 <EnableUART>
		//char c = ReadChar(0);
		//SendChar(0, c);		
	//}
	
	
	SendString(UART_PC, "Starting GSM\r\n");
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	72 e0       	ldi	r23, 0x02	; 2
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1)
	{
		char c = ReadChar(UART_PC);
 364:	c7 df       	rcall	.-114    	; 0x2f4 <SendString>
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	3a df       	rcall	.-396    	; 0x1e0 <ReadChar>
		SendChar(UART_PC, c);
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	69 81       	ldd	r22, Y+1	; 0x01
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	72 df       	rcall	.-284    	; 0x25a <SendChar>
	}
 376:	f7 cf       	rjmp	.-18     	; 0x366 <main+0x26>

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
