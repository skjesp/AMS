
AMS_GSM_MOD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  000003c8  0000043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012d4  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e1c  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b7  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000667  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ee  00000000  00000000  000034d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000039c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ec       	ldi	r30, 0xC8	; 200
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 32       	cpi	r26, 0x2A	; 42
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	f6 d0       	rcall	.+492    	; 0x2fc <main>
 110:	59 c1       	rjmp	.+690    	; 0x3c4 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <EnableUART>:
#include <string.h>
#include <util/delay.h>

void EnableUART(int uartNum)
{
	switch(uartNum){
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	91 05       	cpc	r25, r1
 118:	a9 f0       	breq	.+42     	; 0x144 <EnableUART+0x30>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	91 05       	cpc	r25, r1
 11e:	11 f1       	breq	.+68     	; 0x164 <EnableUART+0x50>
 120:	89 2b       	or	r24, r25
 122:	79 f5       	brne	.+94     	; 0x182 <EnableUART+0x6e>
		case 0:			
			UCSR0A = 0b00100000;
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
			UCSR0B = 0b00011000; // enable transmitter and receiver. No interrupts.
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
			UCSR0C = 0b00000110; // 8 databit
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
			UBRR0 = 8; // Baud set to 115200. See slide 36 lecture 17 MSYS. 9600 baud
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
			break;
 142:	08 95       	ret
		
		case 1:
			UCSR1A = 0b00100000;
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
			UCSR1B = 0b00011000;
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
			UCSR1C = 0b00000110;
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
			UBRR1 = 8;// 103; 115200 baud
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 15e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
			break;
 162:	08 95       	ret
			
		case 2:
			UCSR2A = 0b00100000;
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
			UCSR2B = 0b00011000;
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
			UCSR2C = 0b00000110;
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
			UBRR2 = 103;			
 176:	87 e6       	ldi	r24, 0x67	; 103
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 17e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
 182:	08 95       	ret

00000184 <CharReady>:
	}
}


unsigned char CharReady(int uartNum){
	switch(uartNum)
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	19 f0       	breq	.+6      	; 0x18e <CharReady+0xa>
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	29 f0       	breq	.+10     	; 0x196 <CharReady+0x12>
 18c:	08 c0       	rjmp	.+16     	; 0x19e <CharReady+0x1a>
	{
		case 0:
		return UCSR0A & (1<<7);		
 18e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 192:	80 78       	andi	r24, 0x80	; 128
 194:	08 95       	ret
		break;
		
		case 1:
		return UCSR1A & (1<<7);
 196:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 19a:	80 78       	andi	r24, 0x80	; 128
 19c:	08 95       	ret
		break;
		
		default:
		break;
	}
	return 0;
 19e:	80 e0       	ldi	r24, 0x00	; 0
}
 1a0:	08 95       	ret

000001a2 <ReadChar>:


char ReadChar(int uartNum)
{	
	switch(uartNum)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	91 05       	cpc	r25, r1
 1a6:	61 f0       	breq	.+24     	; 0x1c0 <ReadChar+0x1e>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	91 05       	cpc	r25, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <ReadChar+0x2c>
 1ae:	89 2b       	or	r24, r25
 1b0:	a9 f4       	brne	.+42     	; 0x1dc <ReadChar+0x3a>
	{
		case 0:
			while ( (UCSR0A & (1<<7)) == 0 )
 1b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1b6:	88 23       	and	r24, r24
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <ReadChar+0x10>
			{}
			return UDR0;
 1ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1be:	08 95       	ret
			break;
			
		case 1:
			while ( (UCSR1A & (1<<7)) == 0 )
 1c0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 1c4:	88 23       	and	r24, r24
 1c6:	e4 f7       	brge	.-8      	; 0x1c0 <ReadChar+0x1e>
			{}
			return UDR1;
 1c8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 1cc:	08 95       	ret
			break;
			
		case 2:
			while ( (UCSR2A & (1<<7)) == 0 )
 1ce:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 1d2:	88 23       	and	r24, r24
 1d4:	e4 f7       	brge	.-8      	; 0x1ce <ReadChar+0x2c>
			{}
			return UDR2;
 1d6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 1da:	08 95       	ret
			break;
			
		default:
			break;		
	}
	return 0;	
 1dc:	80 e0       	ldi	r24, 0x00	; 0
}
 1de:	08 95       	ret

000001e0 <SendChar>:

//// Modified from uart.c from BB.
void SendChar(int uartNum, char c)
{
	switch(uartNum)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	91 05       	cpc	r25, r1
 1e4:	61 f0       	breq	.+24     	; 0x1fe <SendChar+0x1e>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	91 05       	cpc	r25, r1
 1ea:	81 f0       	breq	.+32     	; 0x20c <SendChar+0x2c>
 1ec:	89 2b       	or	r24, r25
 1ee:	a1 f4       	brne	.+40     	; 0x218 <SendChar+0x38>
	{
		case 0:
			// Wait for transmitter register empty (ready for new character)
			while ( (UCSR0A & (1<<5)) == 0 )
 1f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <SendChar+0x10>
			{}
			// Then send the character
			UDR0 = c;
 1f8:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 1fc:	08 95       	ret
			
		case 1:
			// Wait for transmitter register empty (ready for new character)
			while ( (UCSR1A & (1<<5)) == 0 )
 1fe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
 202:	85 ff       	sbrs	r24, 5
 204:	fc cf       	rjmp	.-8      	; 0x1fe <SendChar+0x1e>
			{}
			// Then send the character
			UDR1 = c;
 206:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 20a:	08 95       	ret
			
		case 2:
			// Wait for transmitter register empty (ready for new character)
			while ( (UCSR2A & (1<<5)) == 0 )
 20c:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
 210:	85 ff       	sbrs	r24, 5
 212:	fc cf       	rjmp	.-8      	; 0x20c <SendChar+0x2c>
			{}
			// Then send the character
			UDR2 = c;
 214:	60 93 d6 00 	sts	0x00D6, r22	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 218:	08 95       	ret

0000021a <SendString>:



// Modified code from uart.c from BB.
void SendString(int uartNum, char* str)
{
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	8c 01       	movw	r16, r24
 224:	eb 01       	movw	r28, r22
	while(*str != 0)
 226:	03 c0       	rjmp	.+6      	; 0x22e <SendString+0x14>
	{
		// Send the character pointed to by "Streng"
		SendChar(uartNum, *str);
 228:	c8 01       	movw	r24, r16
 22a:	da df       	rcall	.-76     	; 0x1e0 <SendChar>
		// Advance the pointer one step
		str++;			
 22c:	21 96       	adiw	r28, 0x01	; 1


// Modified code from uart.c from BB.
void SendString(int uartNum, char* str)
{
	while(*str != 0)
 22e:	68 81       	ld	r22, Y
 230:	61 11       	cpse	r22, r1
 232:	fa cf       	rjmp	.-12     	; 0x228 <SendString+0xe>
		// Send the character pointed to by "Streng"
		SendChar(uartNum, *str);
		// Advance the pointer one step
		str++;			
	}	
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <sendATcommand>:

void sendATcommand(char* ATcommand, char* response, int selected_UART, char* expectedResult)//, char* expected_answer, unsigned int timeout)
{				
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	cf 5f       	subi	r28, 0xFF	; 255
 258:	d1 09       	sbc	r29, r1
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
 264:	7c 01       	movw	r14, r24
 266:	6b 01       	movw	r12, r22
 268:	8a 01       	movw	r16, r20
 26a:	59 01       	movw	r10, r18
	// Clean inputbuffer
	while(CharReady(selected_UART))
 26c:	02 c0       	rjmp	.+4      	; 0x272 <sendATcommand+0x34>
	{
		ReadChar(selected_UART);
 26e:	c8 01       	movw	r24, r16
 270:	98 df       	rcall	.-208    	; 0x1a2 <ReadChar>
}

void sendATcommand(char* ATcommand, char* response, int selected_UART, char* expectedResult)//, char* expected_answer, unsigned int timeout)
{				
	// Clean inputbuffer
	while(CharReady(selected_UART))
 272:	c8 01       	movw	r24, r16
 274:	87 df       	rcall	.-242    	; 0x184 <CharReady>
 276:	81 11       	cpse	r24, r1
 278:	fa cf       	rjmp	.-12     	; 0x26e <sendATcommand+0x30>
	{
		ReadChar(selected_UART);
	}
	
	// Concatenate command with newline.
	char AT_command_buf[255] = "";
 27a:	1a 82       	std	Y+2, r1	; 0x02
 27c:	19 82       	std	Y+1, r1	; 0x01
 27e:	fe 01       	movw	r30, r28
 280:	33 96       	adiw	r30, 0x03	; 3
 282:	8d ef       	ldi	r24, 0xFD	; 253
 284:	df 01       	movw	r26, r30
 286:	1d 92       	st	X+, r1
 288:	8a 95       	dec	r24
 28a:	e9 f7       	brne	.-6      	; 0x286 <sendATcommand+0x48>
	strcpy(AT_command_buf,ATcommand);
 28c:	b7 01       	movw	r22, r14
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	7c 01       	movw	r14, r24
 294:	76 d0       	rcall	.+236    	; 0x382 <strcpy>
	strcat(AT_command_buf, "\r\n\0");
 296:	f7 01       	movw	r30, r14
 298:	01 90       	ld	r0, Z+
 29a:	00 20       	and	r0, r0
 29c:	e9 f7       	brne	.-6      	; 0x298 <sendATcommand+0x5a>
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	9a e0       	ldi	r25, 0x0A	; 10
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	80 83       	st	Z, r24
	SendString(selected_UART, AT_command_buf);
 2a8:	12 82       	std	Z+2, r1	; 0x02
 2aa:	b7 01       	movw	r22, r14
 2ac:	c8 01       	movw	r24, r16
	
			
	int i = 0;
 2ae:	b5 df       	rcall	.-150    	; 0x21a <SendString>
 2b0:	e1 2c       	mov	r14, r1
	int elapsedms = 0;
	char c;
	//// this loop waits for the answer
	do{
		// if there are data in the UART input buffer, reads it and checks for the answer
		if(CharReady(selected_UART))
 2b2:	f1 2c       	mov	r15, r1
 2b4:	c8 01       	movw	r24, r16
 2b6:	66 df       	rcall	.-308    	; 0x184 <CharReady>
 2b8:	88 23       	and	r24, r24
		{						
			c = ReadChar(selected_UART);
 2ba:	e1 f3       	breq	.-8      	; 0x2b4 <sendATcommand+0x76>
 2bc:	c8 01       	movw	r24, r16
 2be:	71 df       	rcall	.-286    	; 0x1a2 <ReadChar>
			response[i] = c;
 2c0:	f6 01       	movw	r30, r12
 2c2:	ee 0d       	add	r30, r14
 2c4:	ff 1d       	adc	r31, r15
			i++;
 2c6:	80 83       	st	Z, r24
 2c8:	9f ef       	ldi	r25, 0xFF	; 255
 2ca:	e9 1a       	sub	r14, r25

			// Check if expected result is somewhere in the response.			
			if(strstr(response, expectedResult) != NULL){				
 2cc:	f9 0a       	sbc	r15, r25
 2ce:	b5 01       	movw	r22, r10
 2d0:	c6 01       	movw	r24, r12
 2d2:	5e d0       	rcall	.+188    	; 0x390 <strstr>
 2d4:	89 2b       	or	r24, r25
 2d6:	71 f3       	breq	.-36     	; 0x2b4 <sendATcommand+0x76>
			//}
		}
		// Waits for the answer with time out
	}
	while(1);	
 2d8:	c1 50       	subi	r28, 0x01	; 1
 2da:	df 4f       	sbci	r29, 0xFF	; 255
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	08 95       	ret

000002fc <main>:
////Author: Johannes

#include "project_definitions.h"

int main()
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	cf 5f       	subi	r28, 0xFF	; 255
 306:	d1 09       	sbc	r29, r1
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	Setup();
 312:	2b d0       	rcall	.+86     	; 0x36a <Setup>
	char buf[255] = "";	
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	fe 01       	movw	r30, r28
 31a:	33 96       	adiw	r30, 0x03	; 3
 31c:	8d ef       	ldi	r24, 0xFD	; 253
 31e:	df 01       	movw	r26, r30
 320:	1d 92       	st	X+, r1
 322:	8a 95       	dec	r24
 324:	e9 f7       	brne	.-6      	; 0x320 <main+0x24>
	SendString(UART_PC, "TEST START.\r\n");	
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	72 e0       	ldi	r23, 0x02	; 2
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	75 df       	rcall	.-278    	; 0x21a <SendString>
	sendATcommand("AT", buf, UART_GSM, "OK");
 330:	2e e0       	ldi	r18, 0x0E	; 14
 332:	32 e0       	ldi	r19, 0x02	; 2
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	be 01       	movw	r22, r28
 33a:	6f 5f       	subi	r22, 0xFF	; 255
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	81 e1       	ldi	r24, 0x11	; 17
 340:	92 e0       	ldi	r25, 0x02	; 2
 342:	7d df       	rcall	.-262    	; 0x23e <sendATcommand>
	
	SendString(UART_PC, buf);
 344:	be 01       	movw	r22, r28
 346:	6f 5f       	subi	r22, 0xFF	; 255
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	65 df       	rcall	.-310    	; 0x21a <SendString>
	//SendString(UART_PC, "AT command has timed out.\r\n");
	SendString(UART_PC, "Going to while loop\r\n");
 350:	64 e1       	ldi	r22, 0x14	; 20
 352:	72 e0       	ldi	r23, 0x02	; 2
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{	
		char c = ReadChar(UART_GSM);	
 358:	60 df       	rcall	.-320    	; 0x21a <SendString>
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
		SendChar(UART_PC, c);			
 35e:	21 df       	rcall	.-446    	; 0x1a2 <ReadChar>
 360:	68 2f       	mov	r22, r24
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	3c df       	rcall	.-392    	; 0x1e0 <SendChar>
 368:	f8 cf       	rjmp	.-16     	; 0x35a <main+0x5e>

0000036a <Setup>:
#include "waspmoteDriver.h"

void Setup()
{
	// Set pin as output
	DDRE = 0b11111111;	
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	8d b9       	out	0x0d, r24	; 13
	PORTE &= ~(1 << 4); 
 36e:	8e b1       	in	r24, 0x0e	; 14
 370:	8f 7e       	andi	r24, 0xEF	; 239
 372:	8e b9       	out	0x0e, r24	; 14
	//PORTE |= (1 << 4);
	EnableUART(UART_PC);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	cd de       	rcall	.-614    	; 0x114 <EnableUART>
	EnableUART(UART_GSM);	
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	ca ce       	rjmp	.-620    	; 0x114 <EnableUART>
 380:	08 95       	ret

00000382 <strcpy>:
 382:	fb 01       	movw	r30, r22
 384:	dc 01       	movw	r26, r24
 386:	01 90       	ld	r0, Z+
 388:	0d 92       	st	X+, r0
 38a:	00 20       	and	r0, r0
 38c:	e1 f7       	brne	.-8      	; 0x386 <strcpy+0x4>
 38e:	08 95       	ret

00000390 <strstr>:
 390:	fb 01       	movw	r30, r22
 392:	51 91       	ld	r21, Z+
 394:	55 23       	and	r21, r21
 396:	a9 f0       	breq	.+42     	; 0x3c2 <strstr+0x32>
 398:	bf 01       	movw	r22, r30
 39a:	dc 01       	movw	r26, r24
 39c:	4d 91       	ld	r20, X+
 39e:	45 17       	cp	r20, r21
 3a0:	41 11       	cpse	r20, r1
 3a2:	e1 f7       	brne	.-8      	; 0x39c <strstr+0xc>
 3a4:	59 f4       	brne	.+22     	; 0x3bc <strstr+0x2c>
 3a6:	cd 01       	movw	r24, r26
 3a8:	01 90       	ld	r0, Z+
 3aa:	00 20       	and	r0, r0
 3ac:	49 f0       	breq	.+18     	; 0x3c0 <strstr+0x30>
 3ae:	4d 91       	ld	r20, X+
 3b0:	40 15       	cp	r20, r0
 3b2:	41 11       	cpse	r20, r1
 3b4:	c9 f3       	breq	.-14     	; 0x3a8 <strstr+0x18>
 3b6:	fb 01       	movw	r30, r22
 3b8:	41 11       	cpse	r20, r1
 3ba:	ef cf       	rjmp	.-34     	; 0x39a <strstr+0xa>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
